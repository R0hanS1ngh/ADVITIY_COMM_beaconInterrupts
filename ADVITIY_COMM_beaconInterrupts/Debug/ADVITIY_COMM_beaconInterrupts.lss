
ADVITIY_COMM_beaconInterrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00802000  000004e2  00000576  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000324  008020e0  008020e0  00000656  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000656  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f3c  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033c4  00000000  00000000  0000464c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000759  00000000  00000000  00007a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  0000816c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a5b  00000000  00000000  00008218  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000313  00000000  00000000  0000ac73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000af86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_14>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e2 ee       	ldi	r30, 0xE2	; 226
 214:	f4 e0       	ldi	r31, 0x04	; 4
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 3e       	cpi	r26, 0xE0	; 224
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	24 e2       	ldi	r18, 0x24	; 36
 228:	a0 ee       	ldi	r26, 0xE0	; 224
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	a4 30       	cpi	r26, 0x04	; 4
 232:	b2 07       	cpc	r27, r18
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 4f 02 	call	0x49e	; 0x49e <main>
 23a:	0c 94 6f 02 	jmp	0x4de	; 0x4de <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <generateBeacon>:
// 4: Inter-Letter Gap
// 5: WORD Gap


void generateBeacon(char input[])
{
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
	TCC0.PER = 100;		    //Initialize Period
	TCC0.CNT=0;


	sei(); //Set interrupt
}
 256:	4d b7       	in	r20, 0x3d	; 61
 258:	5e b7       	in	r21, 0x3e	; 62
// 5: WORD Gap


void generateBeacon(char input[])
{
	int length= strlen(input); //Length of string input
 25a:	fc 01       	movw	r30, r24
 25c:	01 90       	ld	r0, Z+
 25e:	00 20       	and	r0, r0
 260:	e9 f7       	brne	.-6      	; 0x25c <generateBeacon+0x1a>
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	8f 01       	movw	r16, r30
 266:	08 1b       	sub	r16, r24
 268:	19 0b       	sbc	r17, r25
 26a:	78 01       	movw	r14, r16

	int integerInput[length]; //Array containing integer values corresponding to each character from input string
 26c:	98 01       	movw	r18, r16
 26e:	22 0f       	add	r18, r18
 270:	33 1f       	adc	r19, r19
 272:	6d b7       	in	r22, 0x3d	; 61
 274:	7e b7       	in	r23, 0x3e	; 62
 276:	62 1b       	sub	r22, r18
 278:	73 0b       	sbc	r23, r19
 27a:	6d bf       	out	0x3d, r22	; 61
 27c:	7e bf       	out	0x3e, r23	; 62
 27e:	6f 5f       	subi	r22, 0xFF	; 255
 280:	7f 4f       	sbci	r23, 0xFF	; 255

	for(int j=0;j<length;j++)
 282:	10 16       	cp	r1, r16
 284:	11 06       	cpc	r1, r17
 286:	d4 f4       	brge	.+52     	; 0x2bc <generateBeacon+0x7a>
 288:	fc 01       	movw	r30, r24
 28a:	db 01       	movw	r26, r22
 28c:	80 0f       	add	r24, r16
 28e:	91 1f       	adc	r25, r17
	{
		if(((int)input[j])==32) //Condition for [space]
		{integerInput[j]= 26;}
 290:	0f 2e       	mov	r0, r31
 292:	fa e1       	ldi	r31, 0x1A	; 26
 294:	cf 2e       	mov	r12, r31
 296:	d1 2c       	mov	r13, r1
 298:	f0 2d       	mov	r31, r0

	int integerInput[length]; //Array containing integer values corresponding to each character from input string

	for(int j=0;j<length;j++)
	{
		if(((int)input[j])==32) //Condition for [space]
 29a:	21 91       	ld	r18, Z+
 29c:	20 32       	cpi	r18, 0x20	; 32
 29e:	21 f4       	brne	.+8      	; 0x2a8 <generateBeacon+0x66>
		{integerInput[j]= 26;}
 2a0:	cd 92       	st	X+, r12
 2a2:	dc 92       	st	X, r13
 2a4:	11 97       	sbiw	r26, 0x01	; 1
 2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <generateBeacon+0x72>
		else                    //Condition for other characters
		{integerInput[j]= input[j]-'A';}
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	21 54       	subi	r18, 0x41	; 65
 2ac:	31 09       	sbc	r19, r1
 2ae:	2d 93       	st	X+, r18
 2b0:	3c 93       	st	X, r19
 2b2:	11 97       	sbiw	r26, 0x01	; 1
 2b4:	12 96       	adiw	r26, 0x02	; 2
{
	int length= strlen(input); //Length of string input

	int integerInput[length]; //Array containing integer values corresponding to each character from input string

	for(int j=0;j<length;j++)
 2b6:	e8 17       	cp	r30, r24
 2b8:	f9 07       	cpc	r31, r25
 2ba:	79 f7       	brne	.-34     	; 0x29a <generateBeacon+0x58>
		{integerInput[j]= 26;}
		else                    //Condition for other characters
		{integerInput[j]= input[j]-'A';}
	}

	totalLength=8*length;
 2bc:	c8 01       	movw	r24, r16
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	80 93 02 24 	sts	0x2402, r24	; 0x802402 <totalLength>
 2ce:	90 93 03 24 	sts	0x2403, r25	; 0x802403 <totalLength+0x1>
 2d2:	a2 ee       	ldi	r26, 0xE2	; 226
 2d4:	b0 e2       	ldi	r27, 0x20	; 32
 2d6:	22 e0       	ldi	r18, 0x02	; 2
 2d8:	34 e2       	ldi	r19, 0x24	; 36
 2da:	fd 01       	movw	r30, r26
	for(int m=0; m<HMDATALEN; m++) //Convert each value in toGet array to '2'(action corresponding to do nothing) to avoid garbage values in the unused space
	{
		toGet[m]=2;
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	81 93       	st	Z+, r24
		else                    //Condition for other characters
		{integerInput[j]= input[j]-'A';}
	}

	totalLength=8*length;
	for(int m=0; m<HMDATALEN; m++) //Convert each value in toGet array to '2'(action corresponding to do nothing) to avoid garbage values in the unused space
 2e0:	e2 17       	cp	r30, r18
 2e2:	f3 07       	cpc	r31, r19
 2e4:	e1 f7       	brne	.-8      	; 0x2de <generateBeacon+0x9c>
	{
		toGet[m]=2;
	}

	for (int k=0;k<length;k++)
 2e6:	1e 14       	cp	r1, r14
 2e8:	1f 04       	cpc	r1, r15
 2ea:	1c f5       	brge	.+70     	; 0x332 <generateBeacon+0xf0>
 2ec:	00 0f       	add	r16, r16
 2ee:	11 1f       	adc	r17, r17
 2f0:	00 0f       	add	r16, r16
 2f2:	11 1f       	adc	r17, r17
 2f4:	00 0f       	add	r16, r16
 2f6:	11 1f       	adc	r17, r17
 2f8:	0e 51       	subi	r16, 0x1E	; 30
 2fa:	1f 4d       	sbci	r17, 0xDF	; 223
 2fc:	09 c0       	rjmp	.+18     	; 0x310 <generateBeacon+0xce>
	{for(int l=0;l<8;l++) //Concatenating each individual character operations to make the all-inclusive toGet array
		{
			toGet[(8*k)+l]=morse[integerInput[k]][l];
 2fe:	81 91       	ld	r24, Z+
 300:	8d 93       	st	X+, r24
	{
		toGet[m]=2;
	}

	for (int k=0;k<length;k++)
	{for(int l=0;l<8;l++) //Concatenating each individual character operations to make the all-inclusive toGet array
 302:	a2 17       	cp	r26, r18
 304:	b3 07       	cpc	r27, r19
 306:	d9 f7       	brne	.-10     	; 0x2fe <generateBeacon+0xbc>
 308:	d9 01       	movw	r26, r18
	for(int m=0; m<HMDATALEN; m++) //Convert each value in toGet array to '2'(action corresponding to do nothing) to avoid garbage values in the unused space
	{
		toGet[m]=2;
	}

	for (int k=0;k<length;k++)
 30a:	02 17       	cp	r16, r18
 30c:	13 07       	cpc	r17, r19
 30e:	89 f0       	breq	.+34     	; 0x332 <generateBeacon+0xf0>
	{for(int l=0;l<8;l++) //Concatenating each individual character operations to make the all-inclusive toGet array
		{
			toGet[(8*k)+l]=morse[integerInput[k]][l];
 310:	fb 01       	movw	r30, r22
 312:	81 91       	ld	r24, Z+
 314:	91 91       	ld	r25, Z+
 316:	bf 01       	movw	r22, r30
 318:	fc 01       	movw	r30, r24
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	ee 0f       	add	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	e0 50       	subi	r30, 0x00	; 0
 328:	f0 4e       	sbci	r31, 0xE0	; 224
 32a:	9d 01       	movw	r18, r26
 32c:	28 5f       	subi	r18, 0xF8	; 248
 32e:	3f 4f       	sbci	r19, 0xFF	; 255
 330:	e6 cf       	rjmp	.-52     	; 0x2fe <generateBeacon+0xbc>
		}
	}


	PORTF_DIRSET=PIN1_bm;
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>

	PMIC_EnableHighLevel();				//Enable interrupts : High level for timer
 338:	e0 ea       	ldi	r30, 0xA0	; 160
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	82 81       	ldd	r24, Z+2	; 0x02
 33e:	84 60       	ori	r24, 0x04	; 4
 340:	82 83       	std	Z+2, r24	; 0x02
	TCC0.CTRLA = TC_CLKSEL_DIV64_gc;		//Set Prescaler 1(Same as CPU_PRESCALER)
 342:	e0 e0       	ldi	r30, 0x00	; 0
 344:	f8 e0       	ldi	r31, 0x08	; 8
 346:	85 e0       	ldi	r24, 0x05	; 5
 348:	80 83       	st	Z, r24
	TCC0.CTRLB= TC_WGMODE_NORMAL_gc;    //Wave generation mode : Normal
 34a:	11 82       	std	Z+1, r1	; 0x01
	TCC0.INTCTRLA = TC_OVFINTLVL_HI_gc;	//Enable overflow interrupt
 34c:	83 e0       	ldi	r24, 0x03	; 3
 34e:	86 83       	std	Z+6, r24	; 0x06

	TCC0.PER = 100;		    //Initialize Period
 350:	84 e6       	ldi	r24, 0x64	; 100
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	86 a3       	std	Z+38, r24	; 0x26
 356:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CNT=0;
 358:	10 a2       	std	Z+32, r1	; 0x20
 35a:	11 a2       	std	Z+33, r1	; 0x21


	sei(); //Set interrupt
 35c:	78 94       	sei
}
 35e:	4d bf       	out	0x3d, r20	; 61
 360:	5e bf       	out	0x3e, r21	; 62
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	ff 90       	pop	r15
 36c:	ef 90       	pop	r14
 36e:	df 90       	pop	r13
 370:	cf 90       	pop	r12
 372:	08 95       	ret

00000374 <__vector_14>:

ISR(TCC0_OVF_vect) //Pin for interrupt: Port F- Pin 1
{
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	0b b6       	in	r0, 0x3b	; 59
 380:	0f 92       	push	r0
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
	if(toGet[order]==0)
 38e:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <__data_end>
 392:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <__data_end+0x1>
 396:	ee 51       	subi	r30, 0x1E	; 30
 398:	ff 4d       	sbci	r31, 0xDF	; 223
 39a:	80 81       	ld	r24, Z
 39c:	81 11       	cpse	r24, r1
 39e:	0a c0       	rjmp	.+20     	; 0x3b4 <__vector_14+0x40>
	{   TCC0.PER = DOT;
 3a0:	88 eb       	ldi	r24, 0xB8	; 184
 3a2:	9b e0       	ldi	r25, 0x0B	; 11
 3a4:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 3a8:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		PORTF_OUTSET=PIN1_bm;
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 3b2:	50 c0       	rjmp	.+160    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	
	else if(toGet[order]==1)
 3b4:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <__data_end>
 3b8:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <__data_end+0x1>
 3bc:	ee 51       	subi	r30, 0x1E	; 30
 3be:	ff 4d       	sbci	r31, 0xDF	; 223
 3c0:	80 81       	ld	r24, Z
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	51 f4       	brne	.+20     	; 0x3da <__vector_14+0x66>
	{   TCC0.PER = DASH;
 3c6:	88 e2       	ldi	r24, 0x28	; 40
 3c8:	93 e2       	ldi	r25, 0x23	; 35
 3ca:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 3ce:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		PORTF_OUTSET=PIN1_bm;
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7006a5>
 3d8:	3d c0       	rjmp	.+122    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	
	else if(toGet[order]==3)
 3da:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <__data_end>
 3de:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <__data_end+0x1>
 3e2:	ee 51       	subi	r30, 0x1E	; 30
 3e4:	ff 4d       	sbci	r31, 0xDF	; 223
 3e6:	80 81       	ld	r24, Z
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	51 f4       	brne	.+20     	; 0x400 <__LOCK_REGION_LENGTH__>
	{   TCC0.PER = DOT;
 3ec:	88 eb       	ldi	r24, 0xB8	; 184
 3ee:	9b e0       	ldi	r25, 0x0B	; 11
 3f0:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 3f4:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		PORTF_OUTCLR=PIN1_bm;
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 3fe:	2a c0       	rjmp	.+84     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	
	else if(toGet[order]==4)
 400:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <__data_end>
 404:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <__data_end+0x1>
 408:	ee 51       	subi	r30, 0x1E	; 30
 40a:	ff 4d       	sbci	r31, 0xDF	; 223
 40c:	80 81       	ld	r24, Z
 40e:	84 30       	cpi	r24, 0x04	; 4
 410:	51 f4       	brne	.+20     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{   TCC0.PER = DASH;
 412:	88 e2       	ldi	r24, 0x28	; 40
 414:	93 e2       	ldi	r25, 0x23	; 35
 416:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 41a:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		PORTF_OUTCLR=PIN1_bm;
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 424:	17 c0       	rjmp	.+46     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	
	else if(toGet[order]==5)
 426:	e0 91 e0 20 	lds	r30, 0x20E0	; 0x8020e0 <__data_end>
 42a:	f0 91 e1 20 	lds	r31, 0x20E1	; 0x8020e1 <__data_end+0x1>
 42e:	ee 51       	subi	r30, 0x1E	; 30
 430:	ff 4d       	sbci	r31, 0xDF	; 223
 432:	80 81       	ld	r24, Z
 434:	85 30       	cpi	r24, 0x05	; 5
 436:	51 f4       	brne	.+20     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{	TCC0.PER = WORD;
 438:	80 ee       	ldi	r24, 0xE0	; 224
 43a:	9e e2       	ldi	r25, 0x2E	; 46
 43c:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
 440:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
		PORTF_OUTCLR=PIN1_bm;
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7006a6>
 44a:	04 c0       	rjmp	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
	}
	
	else if(toGet[order]==2)
 44c:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <__data_end>
 450:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <__data_end+0x1>
	{
		;
	}
	order++;
 454:	80 91 e0 20 	lds	r24, 0x20E0	; 0x8020e0 <__data_end>
 458:	90 91 e1 20 	lds	r25, 0x20E1	; 0x8020e1 <__data_end+0x1>
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <__data_end>
 462:	90 93 e1 20 	sts	0x20E1, r25	; 0x8020e1 <__data_end+0x1>
	
	if(order==totalLength) //close the ISR
 466:	20 91 e0 20 	lds	r18, 0x20E0	; 0x8020e0 <__data_end>
 46a:	30 91 e1 20 	lds	r19, 0x20E1	; 0x8020e1 <__data_end+0x1>
 46e:	80 91 02 24 	lds	r24, 0x2402	; 0x802402 <totalLength>
 472:	90 91 03 24 	lds	r25, 0x2403	; 0x802403 <totalLength+0x1>
 476:	28 17       	cp	r18, r24
 478:	39 07       	cpc	r19, r25
 47a:	21 f4       	brne	.+8      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	{   TCC0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
		cli();
 482:	f8 94       	cli
	}
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0b be       	out	0x3b, r0	; 59
 494:	0f 90       	pop	r0
 496:	0f be       	out	0x3f, r0	; 63
 498:	0f 90       	pop	r0
 49a:	1f 90       	pop	r1
 49c:	18 95       	reti

0000049e <main>:

int main(void)

{
	
	generateBeacon("SOS OSO"); //Input String
 49e:	88 ed       	ldi	r24, 0xD8	; 216
 4a0:	90 e2       	ldi	r25, 0x20	; 32
 4a2:	0e 94 21 01 	call	0x242	; 0x242 <generateBeacon>

	PORTF_DIRSET=PIN6_bm;
 4a6:	80 e4       	ldi	r24, 0x40	; 64
 4a8:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>

	while (1) //Code running in parallel to the interrupt
	{ _delay_ms(1000);
		PORTF_OUTSET=PIN6_bm;
 4ac:	a5 ea       	ldi	r26, 0xA5	; 165
 4ae:	b6 e0       	ldi	r27, 0x06	; 6
		_delay_ms(1000);
		PORTF_OUTCLR=PIN6_bm;
 4b0:	e6 ea       	ldi	r30, 0xA6	; 166
 4b2:	f6 e0       	ldi	r31, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4b4:	2f e7       	ldi	r18, 0x7F	; 127
 4b6:	3a e1       	ldi	r19, 0x1A	; 26
 4b8:	96 e0       	ldi	r25, 0x06	; 6
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	30 40       	sbci	r19, 0x00	; 0
 4be:	90 40       	sbci	r25, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <main+0x1c>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <main+0x26>
 4c4:	00 00       	nop

	PORTF_DIRSET=PIN6_bm;

	while (1) //Code running in parallel to the interrupt
	{ _delay_ms(1000);
		PORTF_OUTSET=PIN6_bm;
 4c6:	8c 93       	st	X, r24
 4c8:	2f e7       	ldi	r18, 0x7F	; 127
 4ca:	3a e1       	ldi	r19, 0x1A	; 26
 4cc:	96 e0       	ldi	r25, 0x06	; 6
 4ce:	21 50       	subi	r18, 0x01	; 1
 4d0:	30 40       	sbci	r19, 0x00	; 0
 4d2:	90 40       	sbci	r25, 0x00	; 0
 4d4:	e1 f7       	brne	.-8      	; 0x4ce <main+0x30>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <main+0x3a>
 4d8:	00 00       	nop
		_delay_ms(1000);
		PORTF_OUTCLR=PIN6_bm;
 4da:	80 83       	st	Z, r24
 4dc:	eb cf       	rjmp	.-42     	; 0x4b4 <main+0x16>

000004de <_exit>:
 4de:	f8 94       	cli

000004e0 <__stop_program>:
 4e0:	ff cf       	rjmp	.-2      	; 0x4e0 <__stop_program>
